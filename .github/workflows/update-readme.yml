name: Update README with Latest Stats

on:
  schedule:
    # Runs every Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python 3.11.0
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.0'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('gen/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r gen/requirements.txt

      - name: Generate README with latest stats
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd gen
          python generate_readme.py

      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code README.md || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Create branch and commit changes
        if: steps.git-check.outputs.changed == 'true'
        id: create-branch
        run: |
          BRANCH_NAME="update-readme-$(date +'%Y-%m-%d')"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git checkout -b $BRANCH_NAME
          git add README.md
          git commit -m "chore: update README with latest repository stats"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: steps.git-check.outputs.changed == 'true'
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "chore: update README with latest repository stats" \
            --body "This PR updates the README.md file with the latest repository statistics from GitHub API.

          - Updated stars, forks, and last update dates
          - Updated latest release information
          - Updated activity status

          This PR was automatically generated by GitHub Actions." \
            --base main \
            --head ${{ steps.create-branch.outputs.branch_name }})

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "PR created: $PR_URL"

      - name: Merge Pull Request
        if: steps.git-check.outputs.changed == 'true'
        id: merge-pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Extract PR number from URL
          PR_NUMBER=$(echo "${{ steps.create-pr.outputs.pr_url }}" | grep -oE '[0-9]+$')

          # Merge the PR directly without auto-merge
          gh pr merge $PR_NUMBER \
            --merge \
            --delete-branch \
            --repo ${{ github.repository }}

      - name: Cleanup unmerged branch
        if: always() && steps.git-check.outputs.changed == 'true' && steps.create-branch.outputs.branch_name != '' && failure()
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch_name }}"

          # Check if branch exists on remote
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME exists, attempting to delete..."

            # Try to close any open PR for this branch
            PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' 2>/dev/null || echo "")
            if [ -n "$PR_NUMBER" ]; then
              echo "Closing PR #$PR_NUMBER"
              gh pr close $PR_NUMBER --delete-branch --repo ${{ github.repository }} || true
            else
              # If no PR or PR close failed, delete branch directly
              echo "Deleting branch $BRANCH_NAME"
              git push origin --delete "$BRANCH_NAME" || true
            fi

            echo "Cleanup completed for branch $BRANCH_NAME"
          else
            echo "Branch $BRANCH_NAME does not exist or already deleted"
          fi
